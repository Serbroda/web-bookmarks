// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (
        created_at,
        username,
        password,
        email,
        first_name,
        last_name,
        active,
        activation_confirmed_at
    )
VALUES(
        CURRENT_TIMESTAMP,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type CreateUserParams struct {
	Username              string         `db:"username"`
	Password              string         `db:"password"`
	Email                 string         `db:"email"`
	FirstName             sql.NullString `db:"first_name"`
	LastName              sql.NullString `db:"last_name"`
	Active                bool           `db:"active"`
	ActivationConfirmedAt sql.NullTime   `db:"activation_confirmed_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Active,
		arg.ActivationConfirmedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const findRolesByUser = `-- name: FindRolesByUser :many
SELECT r.id, r.created_at, r.updated_at, r.deleted_at, r.name, r.description
from roles r
    inner join users_roles ur on ur.role_id = r.id
where ur.user_id = ?
`

func (q *Queries) FindRolesByUser(ctx context.Context, userID int64) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, findRolesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUser = `-- name: FindUser :one
SELECT id, created_at, updated_at, deleted_at, username, password, email, first_name, last_name, active, activation_confirmed_at
FROM users u
WHERE id = ?
LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Active,
		&i.ActivationConfirmedAt,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, created_at, updated_at, deleted_at, username, password, email, first_name, last_name, active, activation_confirmed_at
FROM users
WHERE lower(username) = lower(?)
LIMIT 1
`

func (q *Queries) FindUserByUsername(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Active,
		&i.ActivationConfirmedAt,
	)
	return i, err
}

const inserUserRole = `-- name: InserUserRole :exec
INSERT INTO users_roles (user_id, role_id, created_at)
VALUES (?, ?, CURRENT_TIMESTAMP)
`

type InserUserRoleParams struct {
	UserID int64 `db:"user_id"`
	RoleID int64 `db:"role_id"`
}

func (q *Queries) InserUserRole(ctx context.Context, arg InserUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, inserUserRole, arg.UserID, arg.RoleID)
	return err
}
