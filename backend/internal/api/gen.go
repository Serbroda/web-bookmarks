// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Bookmark defines model for Bookmark.
type Bookmark struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Title       *string `json:"title,omitempty"`
	Url         string  `json:"url"`
}

// BookmarkList defines model for BookmarkList.
type BookmarkList = []Bookmark

// Error defines model for Error.
type Error = map[string]interface{}

// Space defines model for Space.
type Space struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
}

// SpaceList defines model for SpaceList.
type SpaceList = []Space

// BadRequest defines model for BadRequest.
type BadRequest = Error

// CreateBookmarkJSONRequestBody defines body for CreateBookmark for application/json ContentType.
type CreateBookmarkJSONRequestBody = Bookmark

// CreateSpaceJSONRequestBody defines body for CreateSpace for application/json ContentType.
type CreateSpaceJSONRequestBody = Space

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all bookmarks
	// (GET /bookmarks)
	ListBookmarks(ctx echo.Context) error
	// Create a new bookmark
	// (POST /bookmarks)
	CreateBookmark(ctx echo.Context) error
	// List all spaces
	// (GET /spaces)
	ListSpaces(ctx echo.Context) error
	// Create a new space
	// (POST /spaces)
	CreateSpace(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListBookmarks converts echo context to params.
func (w *ServerInterfaceWrapper) ListBookmarks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListBookmarks(ctx)
	return err
}

// CreateBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBookmark(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBookmark(ctx)
	return err
}

// ListSpaces converts echo context to params.
func (w *ServerInterfaceWrapper) ListSpaces(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListSpaces(ctx)
	return err
}

// CreateSpace converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpace(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSpace(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/bookmarks", wrapper.ListBookmarks)
	router.POST(baseURL+"/bookmarks", wrapper.CreateBookmark)
	router.GET(baseURL+"/spaces", wrapper.ListSpaces)
	router.POST(baseURL+"/spaces", wrapper.CreateSpace)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xVTW/TQBD9K9bA0Yodwsm3FoFUgQSiQhyqHjb2tNnW3t3OrotCtP8dza5jx4rBQkoA",
	"cduP8cx7b+atd1DqxmiFylkodkBojVYWw+ZSVJ/xqUXreFdq5VCFpTCmlqVwUqvswWrFZ7bcYCN49ZLw",
	"Dgp4kQ2ps3hrs7dEmsB7n0KFtiRpOAkUXCvZF/MpvNO0llWFIfU4crjyKXxRonUbTfI7Vseho1uu2cEI",
	"5LR+bAQ98tqQNkhORtqjHDtwW4NQgHUk1T3XlNXksZOuxsmbluqJc58C4VMriZHfhKDbdB+k1w9YBiX2",
	"OD/I2AbpsLFzMvfkfJ9REIkt72MLBjxDqWsjSjyZHko0OE87RE3xDmB+i3SEf8SYK0p1pwOW2KNe1OQr",
	"ri+MSS4+XUEKz0g2Ds5ykS9yTqUNKmEkFLBa5IsVpGCE2wQo2bpLEnb3GICybsEXVxUUwPAv+6h07K5X",
	"eX4yW42GZMJdH98zmdf58meJemTZ2DP80Wr+owNPssvaphG07QRIRF0ng1Y+BaPthFhvCIXDfnLjmCAL",
	"WG1PLlQUaRhERy36owYtz1R33JxIvBM7nxf74Fn+K02NeBORKPzWNzbEZJYt+Gs/XMeQM5pheDn+RSd0",
	"Es3YIL5l5/FA907+WQMcFP2Ppt8OrCwS/z+guNnFHz5kwsjseQn+1v8IAAD//3UeQmZnCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
