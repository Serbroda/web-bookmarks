// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"github.com/labstack/echo/v4"
)

// Bookmark defines model for Bookmark.
type Bookmark struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Title       *string `json:"title,omitempty"`
	Url         string  `json:"url"`
}

// BookmarkList defines model for BookmarkList.
type BookmarkList = []Bookmark

// Space defines model for Space.
type Space struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
}

// SpaceList defines model for SpaceList.
type SpaceList = []Space

// CreateBookmarkJSONRequestBody defines body for CreateBookmark for application/json ContentType.
type CreateBookmarkJSONRequestBody = Bookmark

// CreateSpaceJSONRequestBody defines body for CreateSpace for application/json ContentType.
type CreateSpaceJSONRequestBody = Space

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all bookmarks
	// (GET /bookmarks)
	ListBookmarks(ctx echo.Context) error
	// Create a new bookmark
	// (POST /bookmarks)
	CreateBookmark(ctx echo.Context) error
	// List all spaces
	// (GET /spaces)
	ListSpaces(ctx echo.Context) error
	// Create a new space
	// (POST /spaces)
	CreateSpace(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListBookmarks converts echo context to params.
func (w *ServerInterfaceWrapper) ListBookmarks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListBookmarks(ctx)
	return err
}

// CreateBookmark converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBookmark(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBookmark(ctx)
	return err
}

// ListSpaces converts echo context to params.
func (w *ServerInterfaceWrapper) ListSpaces(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListSpaces(ctx)
	return err
}

// CreateSpace converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpace(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSpace(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/bookmarks", wrapper.ListBookmarks)
	router.POST(baseURL+"/bookmarks", wrapper.CreateBookmark)
	router.GET(baseURL+"/spaces", wrapper.ListSpaces)
	router.POST(baseURL+"/spaces", wrapper.CreateSpace)

}
