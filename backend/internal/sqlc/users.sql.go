// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const countByUsernameAndTag = `-- name: CountByUsernameAndTag :one
SELECT count(*)
FROM users
WHERE lower(username) = lower(?)
  AND tag = ? LIMIT 1
`

type CountByUsernameAndTagParams struct {
	LOWER string         `db:"LOWER" json:"LOWER"`
	Tag   sql.NullString `db:"tag" json:"tag"`
}

func (q *Queries) CountByUsernameAndTag(ctx context.Context, arg CountByUsernameAndTagParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countByUsernameAndTag, arg.LOWER, arg.Tag)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (created_at,
                   updated_at,
                   email,
                   username,
                   tag,
                   password)
VALUES (CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        ?,
        ?,
        ?,
        ?)
`

type CreateUserParams struct {
	Email    string         `db:"email" json:"email"`
	Username sql.NullString `db:"username" json:"username"`
	Tag      sql.NullString `db:"tag" json:"tag"`
	Password string         `db:"password" json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.Tag,
		arg.Password,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, username, tag, password, created_at, updated_at
FROM users u
WHERE lower(email) = lower(?) LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Tag,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, email, username, tag, password, created_at, updated_at
FROM users u
WHERE id = ? LIMIT 1
`

func (q *Queries) FindUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Tag,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, email, username, tag, password, created_at, updated_at
FROM users u
WHERE lower(username) = ?
  AND tag = ? LIMIT 1
`

type FindUserByUsernameParams struct {
	Username sql.NullString `db:"username" json:"username"`
	Tag      sql.NullString `db:"tag" json:"tag"`
}

func (q *Queries) FindUserByUsername(ctx context.Context, arg FindUserByUsernameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, arg.Username, arg.Tag)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Tag,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmail = `-- name: UpdateEmail :exec
;

UPDATE users
SET username = ?,
    tag      = ?
`

type UpdateEmailParams struct {
	Username sql.NullString `db:"username" json:"username"`
	Tag      sql.NullString `db:"tag" json:"tag"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Username, arg.Tag)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
;

UPDATE users
SET username = ?,
    tag      = ?
`

type UpdatePasswordParams struct {
	Username sql.NullString `db:"username" json:"username"`
	Tag      sql.NullString `db:"tag" json:"tag"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Username, arg.Tag)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE users
SET username = ?,
    tag      = ?
`

type UpdateUsernameParams struct {
	Username sql.NullString `db:"username" json:"username"`
	Tag      sql.NullString `db:"tag" json:"tag"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUsername, arg.Username, arg.Tag)
	return err
}
