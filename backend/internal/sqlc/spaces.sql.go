// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: spaces.sql

package sqlc

import (
	"context"
)

const countSpacesUsers = `-- name: CountSpacesUsers :one
;

SELECT count(*)
FROM spaces_users s
WHERE s.space_id = ?
  AND s.user_id = ? LIMIT 1
`

type CountSpacesUsersParams struct {
	SpaceID int64 `db:"space_id" json:"space_id"`
	UserID  int64 `db:"user_id" json:"user_id"`
}

func (q *Queries) CountSpacesUsers(ctx context.Context, arg CountSpacesUsersParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSpacesUsers, arg.SpaceID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSpace = `-- name: CreateSpace :one
INSERT INTO spaces(created_at,
                   updated_at,
                   name,
                   description,
                   visibility)
VALUES (CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        ?,
        ?,
        ?) RETURNING id, name, description, visibility, created_at, updated_at
`

type CreateSpaceParams struct {
	Name        string  `db:"name" json:"name"`
	Description *string `db:"description" json:"description"`
	Visibility  string  `db:"visibility" json:"visibility"`
}

func (q *Queries) CreateSpace(ctx context.Context, arg CreateSpaceParams) (Space, error) {
	row := q.db.QueryRowContext(ctx, createSpace, arg.Name, arg.Description, arg.Visibility)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSpaceUser = `-- name: CreateSpaceUser :one
;

INSERT INTO spaces_users(created_at,
                         space_id,
                         user_id,
                         role)
VALUES (CURRENT_TIMESTAMP,
        ?,
        ?,
        ?) RETURNING space_id, user_id, role, created_at
`

type CreateSpaceUserParams struct {
	SpaceID int64  `db:"space_id" json:"space_id"`
	UserID  int64  `db:"user_id" json:"user_id"`
	Role    string `db:"role" json:"role"`
}

func (q *Queries) CreateSpaceUser(ctx context.Context, arg CreateSpaceUserParams) (SpacesUser, error) {
	row := q.db.QueryRowContext(ctx, createSpaceUser, arg.SpaceID, arg.UserID, arg.Role)
	var i SpacesUser
	err := row.Scan(
		&i.SpaceID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const findSpaceById = `-- name: FindSpaceById :one
;

SELECT id, name, description, visibility, created_at, updated_at
FROM spaces s
WHERE id = ? LIMIT 1
`

func (q *Queries) FindSpaceById(ctx context.Context, id int64) (Space, error) {
	row := q.db.QueryRowContext(ctx, findSpaceById, id)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findSpacesByUserId = `-- name: FindSpacesByUserId :many
SELECT s.id, s.name, s.description, s.visibility, s.created_at, s.updated_at--, su.user_id, su.role, su.created_at as assigned_at
FROM spaces s
         INNER JOIN spaces_users su on
    su.space_id = s.id AND
    su.user_id = ?
`

func (q *Queries) FindSpacesByUserId(ctx context.Context, userID int64) ([]Space, error) {
	rows, err := q.db.QueryContext(ctx, findSpacesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Space
	for rows.Next() {
		var i Space
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Visibility,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
