// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pages.sql

package sqlc

import (
	"context"
)

const findPageById = `-- name: FindPageById :one
SELECT id, space_id, name, description, visibility, parent_id, created_at, updated_at
FROM pages p
WHERE id = ? LIMIT 1
`

func (q *Queries) FindPageById(ctx context.Context, id int64) (Page, error) {
	row := q.db.QueryRowContext(ctx, findPageById, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.SpaceID,
		&i.Name,
		&i.Description,
		&i.Visibility,
		&i.ParentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findPagesBySpaceId = `-- name: FindPagesBySpaceId :many
SELECT id, space_id, name, description, visibility, parent_id, created_at, updated_at
FROM pages p
WHERE space_id = ?
`

func (q *Queries) FindPagesBySpaceId(ctx context.Context, spaceID int64) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, findPagesBySpaceId, spaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.SpaceID,
			&i.Name,
			&i.Description,
			&i.Visibility,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRootPagesBySpaceId = `-- name: FindRootPagesBySpaceId :many
SELECT id, space_id, name, description, visibility, parent_id, created_at, updated_at
FROM pages p
WHERE space_id = ? AND parent_id IS NULL
`

func (q *Queries) FindRootPagesBySpaceId(ctx context.Context, spaceID int64) ([]Page, error) {
	rows, err := q.db.QueryContext(ctx, findRootPagesBySpaceId, spaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.SpaceID,
			&i.Name,
			&i.Description,
			&i.Visibility,
			&i.ParentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
