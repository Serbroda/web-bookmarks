// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: pages.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createPage = `-- name: CreatePage :execlastid
INSERT INTO pages (
        created_at,
        short_id,
        owner_id,
        space_id,
        parent_id,
        name,
        description,
        visibility
    )
VALUES(
        CURRENT_TIMESTAMP,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type CreatePageParams struct {
	ShortID     string         `db:"short_id"`
	OwnerID     int64          `db:"owner_id"`
	SpaceID     int64          `db:"space_id"`
	ParentID    sql.NullInt64  `db:"parent_id"`
	Name        string         `db:"name"`
	Description sql.NullString `db:"description"`
	Visibility  string         `db:"visibility"`
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createPage,
		arg.ShortID,
		arg.OwnerID,
		arg.SpaceID,
		arg.ParentID,
		arg.Name,
		arg.Description,
		arg.Visibility,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const findPage = `-- name: FindPage :one
SELECT id, created_at, updated_at, deleted_at, short_id, owner_id, space_id, parent_id, name, description, visibility
FROM pages
WHERE id = ?
LIMIT 1
`

func (q *Queries) FindPage(ctx context.Context, id int64) (Page, error) {
	row := q.db.QueryRowContext(ctx, findPage, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ShortID,
		&i.OwnerID,
		&i.SpaceID,
		&i.ParentID,
		&i.Name,
		&i.Description,
		&i.Visibility,
	)
	return i, err
}

const findPageByShortId = `-- name: FindPageByShortId :one
SELECT id, created_at, updated_at, deleted_at, short_id, owner_id, space_id, parent_id, name, description, visibility
FROM pages
WHERE short_id = ?
LIMIT 1
`

func (q *Queries) FindPageByShortId(ctx context.Context, shortID string) (Page, error) {
	row := q.db.QueryRowContext(ctx, findPageByShortId, shortID)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ShortID,
		&i.OwnerID,
		&i.SpaceID,
		&i.ParentID,
		&i.Name,
		&i.Description,
		&i.Visibility,
	)
	return i, err
}

const updatePage = `-- name: UpdatePage :exec
UPDATE pages
SET updated_at = CURRENT_TIMESTAMP,
    owner_id = COALESCE(?, owner_id),
    parent_id = COALESCE(?, parent_id),
    name = COALESCE(?, name),
    description = COALESCE(?, description),
    visibility = COALESCE(?, visibility)
WHERE id = ?
`

type UpdatePageParams struct {
	OwnerID     int64          `db:"owner_id"`
	ParentID    sql.NullInt64  `db:"parent_id"`
	Name        string         `db:"name"`
	Description sql.NullString `db:"description"`
	Visibility  string         `db:"visibility"`
	ID          int64          `db:"id"`
}

func (q *Queries) UpdatePage(ctx context.Context, arg UpdatePageParams) error {
	_, err := q.db.ExecContext(ctx, updatePage,
		arg.OwnerID,
		arg.ParentID,
		arg.Name,
		arg.Description,
		arg.Visibility,
		arg.ID,
	)
	return err
}
