// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: roles.sql

package sqlc

import (
	"context"
)

const countUserRole = `-- name: CountUserRole :one
SELECT count(*)
FROM users_roles ur
    INNER JOIN roles r on r.id = ur.role_id
WHERE ur.user_id = ?
    AND r.name = ?
`

type CountUserRoleParams struct {
	UserID int64  `db:"user_id"`
	Name   string `db:"name"`
}

func (q *Queries) CountUserRole(ctx context.Context, arg CountUserRoleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserRole, arg.UserID, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM users_roles
WHERE user_id = ?
    AND role_id = ?
`

type DeleteUserRoleParams struct {
	UserID int64 `db:"user_id"`
	RoleID int64 `db:"role_id"`
}

func (q *Queries) DeleteUserRole(ctx context.Context, arg DeleteUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserRole, arg.UserID, arg.RoleID)
	return err
}

const findAllRoles = `-- name: FindAllRoles :many
SELECT id, created_at, updated_at, deleted_at, name, description
FROM roles
`

func (q *Queries) FindAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, findAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRoleByName = `-- name: FindRoleByName :one
SELECT id, created_at, updated_at, deleted_at, name, description
FROM roles
WHERE lower(name) = lower(?)
LIMIT 1
`

func (q *Queries) FindRoleByName(ctx context.Context, lower string) (Role, error) {
	row := q.db.QueryRowContext(ctx, findRoleByName, lower)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const insertUserRole = `-- name: InsertUserRole :exec
INSERT INTO users_roles(user_id, role_id)
VALUES(?, ?)
`

type InsertUserRoleParams struct {
	UserID int64 `db:"user_id"`
	RoleID int64 `db:"role_id"`
}

func (q *Queries) InsertUserRole(ctx context.Context, arg InsertUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, insertUserRole, arg.UserID, arg.RoleID)
	return err
}
