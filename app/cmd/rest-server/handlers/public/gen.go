// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package public

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// IdInt64 defines model for IdInt64.
type IdInt64 = int64

// Jwt defines model for Jwt.
type Jwt = string

// LoginDto defines model for LoginDto.
type LoginDto struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponseDto defines model for LoginResponseDto.
type LoginResponseDto struct {
	AccessToken  *Jwt     `json:"access_token,omitempty"`
	RefreshToken *Jwt     `json:"refresh_token,omitempty"`
	User         *UserDto `json:"user,omitempty"`
}

// RegistrationDto defines model for RegistrationDto.
type RegistrationDto struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Password  string `json:"password"`
	Username  string `json:"username"`
}

// TokenPairDto defines model for TokenPairDto.
type TokenPairDto struct {
	AccessToken  *Jwt `json:"access_token,omitempty"`
	RefreshToken *Jwt `json:"refresh_token,omitempty"`
}

// UserDto defines model for UserDto.
type UserDto struct {
	Id       *IdInt64 `json:"id,omitempty"`
	Username *string  `json:"username,omitempty"`
}

// ActivateParams defines parameters for Activate.
type ActivateParams struct {
	Code string `form:"code" json:"code"`
}

// StartPasswordResetParams defines parameters for StartPasswordReset.
type StartPasswordResetParams struct {
	Code string `form:"code" json:"code"`
}

// RequestPasswordResetJSONBody defines parameters for RequestPasswordReset.
type RequestPasswordResetJSONBody struct {
	Email string `json:"email"`
}

// ResetPasswordJSONBody defines parameters for ResetPassword.
type ResetPasswordJSONBody struct {
	Code     string `json:"code"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	RefreshToken Jwt `json:"refresh_token"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginDto

// RequestPasswordResetJSONRequestBody defines body for RequestPasswordReset for application/json ContentType.
type RequestPasswordResetJSONRequestBody RequestPasswordResetJSONBody

// ResetPasswordJSONRequestBody defines body for ResetPassword for application/json ContentType.
type ResetPasswordJSONRequestBody ResetPasswordJSONBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegistrationDto

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Refresh token
	// (GET /auth/activate)
	Activate(ctx echo.Context, params ActivateParams) error
	// Log in
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// Start password reset
	// (GET /auth/password_reset)
	StartPasswordReset(ctx echo.Context, params StartPasswordResetParams) error
	// Request a password reset
	// (POST /auth/password_reset)
	RequestPasswordReset(ctx echo.Context) error
	// Reset password
	// (PUT /auth/password_reset)
	ResetPassword(ctx echo.Context) error
	// Refresh token
	// (POST /auth/refresh_token)
	RefreshToken(ctx echo.Context) error
	// Register
	// (POST /auth/register)
	Register(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Activate converts echo context to params.
func (w *ServerInterfaceWrapper) Activate(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ActivateParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Activate(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// StartPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) StartPasswordReset(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params StartPasswordResetParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartPasswordReset(ctx, params)
	return err
}

// RequestPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) RequestPasswordReset(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestPasswordReset(ctx)
	return err
}

// ResetPassword converts echo context to params.
func (w *ServerInterfaceWrapper) ResetPassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResetPassword(ctx)
	return err
}

// RefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) RefreshToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RefreshToken(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Register(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/activate", wrapper.Activate)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.GET(baseURL+"/auth/password_reset", wrapper.StartPasswordReset)
	router.POST(baseURL+"/auth/password_reset", wrapper.RequestPasswordReset)
	router.PUT(baseURL+"/auth/password_reset", wrapper.ResetPassword)
	router.POST(baseURL+"/auth/refresh_token", wrapper.RefreshToken)
	router.POST(baseURL+"/auth/register", wrapper.Register)

}
