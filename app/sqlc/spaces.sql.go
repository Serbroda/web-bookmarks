// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: spaces.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createSpace = `-- name: CreateSpace :execlastid
INSERT INTO spaces (
        created_at,
        short_id,
        owner_id,
        name,
        description,
        visibility
    )
VALUES(CURRENT_TIMESTAMP, ?, ?, ?, ?, ?)
`

type CreateSpaceParams struct {
	ShortID     string         `db:"short_id"`
	OwnerID     int64          `db:"owner_id"`
	Name        string         `db:"name"`
	Description sql.NullString `db:"description"`
	Visibility  string         `db:"visibility"`
}

func (q *Queries) CreateSpace(ctx context.Context, arg CreateSpaceParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createSpace,
		arg.ShortID,
		arg.OwnerID,
		arg.Name,
		arg.Description,
		arg.Visibility,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteUserSpace = `-- name: DeleteUserSpace :exec
DELETE FROM users_spaces
WHERE user_id = ?
    AND space_id = ?
`

type DeleteUserSpaceParams struct {
	UserID  int64 `db:"user_id"`
	SpaceID int64 `db:"space_id"`
}

func (q *Queries) DeleteUserSpace(ctx context.Context, arg DeleteUserSpaceParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserSpace, arg.UserID, arg.SpaceID)
	return err
}

const findSpace = `-- name: FindSpace :one
SELECT id, created_at, updated_at, deleted_at, short_id, owner_id, name, description, visibility
FROM spaces
WHERE id = ?
LIMIT 1
`

func (q *Queries) FindSpace(ctx context.Context, id int64) (Space, error) {
	row := q.db.QueryRowContext(ctx, findSpace, id)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ShortID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.Visibility,
	)
	return i, err
}

const findSpaceByShortId = `-- name: FindSpaceByShortId :one
SELECT id, created_at, updated_at, deleted_at, short_id, owner_id, name, description, visibility
FROM spaces
WHERE short_id = ?
LIMIT 1
`

func (q *Queries) FindSpaceByShortId(ctx context.Context, shortID string) (Space, error) {
	row := q.db.QueryRowContext(ctx, findSpaceByShortId, shortID)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ShortID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.Visibility,
	)
	return i, err
}

const findUserSpace = `-- name: FindUserSpace :one
SELECT s.id, s.created_at, s.updated_at, s.deleted_at, s.short_id, s.owner_id, s.name, s.description, s.visibility
FROM spaces s
    INNER JOIN users_spaces us on us.space_id = s.id
WHERE us.user_id = ?
    and s.short_id = ?
    and (
        s.visibility <> 'PRIVATE'
        or s.owner_id = us.user_id
    )
LIMIT 1
`

type FindUserSpaceParams struct {
	UserID  int64  `db:"user_id"`
	ShortID string `db:"short_id"`
}

func (q *Queries) FindUserSpace(ctx context.Context, arg FindUserSpaceParams) (Space, error) {
	row := q.db.QueryRowContext(ctx, findUserSpace, arg.UserID, arg.ShortID)
	var i Space
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.ShortID,
		&i.OwnerID,
		&i.Name,
		&i.Description,
		&i.Visibility,
	)
	return i, err
}

const findUserSpaces = `-- name: FindUserSpaces :many
SELECT s.id, s.created_at, s.updated_at, s.deleted_at, s.short_id, s.owner_id, s.name, s.description, s.visibility
FROM spaces s
    INNER JOIN users_spaces us on us.space_id = s.id
WHERE us.user_id = ?
`

func (q *Queries) FindUserSpaces(ctx context.Context, userID int64) ([]Space, error) {
	rows, err := q.db.QueryContext(ctx, findUserSpaces, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Space
	for rows.Next() {
		var i Space
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.ShortID,
			&i.OwnerID,
			&i.Name,
			&i.Description,
			&i.Visibility,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUserSpace = `-- name: InsertUserSpace :exec
INSERT INTO users_spaces (user_id, space_id, role_id, created_at)
VALUES(?, ?, ?, CURRENT_TIMESTAMP)
`

type InsertUserSpaceParams struct {
	UserID  int64 `db:"user_id"`
	SpaceID int64 `db:"space_id"`
	RoleID  int64 `db:"role_id"`
}

func (q *Queries) InsertUserSpace(ctx context.Context, arg InsertUserSpaceParams) error {
	_, err := q.db.ExecContext(ctx, insertUserSpace, arg.UserID, arg.SpaceID, arg.RoleID)
	return err
}

const updateSpace = `-- name: UpdateSpace :exec
UPDATE spaces
SET updated_at = CURRENT_TIMESTAMP,
    name = COALESCE(?, updated_at),
    description = COALESCE(?, updated_at),
    visibility = COALESCE(?, updated_at)
WHERE id = ?
`

type UpdateSpaceParams struct {
	Name        string         `db:"name"`
	Description sql.NullString `db:"description"`
	Visibility  string         `db:"visibility"`
	ID          int64          `db:"id"`
}

func (q *Queries) UpdateSpace(ctx context.Context, arg UpdateSpaceParams) error {
	_, err := q.db.ExecContext(ctx, updateSpace,
		arg.Name,
		arg.Description,
		arg.Visibility,
		arg.ID,
	)
	return err
}
