// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO users (
        created_at,
        username,
        password,
        email,
        first_name,
        last_name,
        active,
        activation_confirmed_at
    )
VALUES(
        CURRENT_TIMESTAMP,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type CreateUserParams struct {
	Username              string       `db:"username"`
	Password              string       `db:"password"`
	Email                 string       `db:"email"`
	FirstName             string       `db:"first_name"`
	LastName              string       `db:"last_name"`
	Active                bool         `db:"active"`
	ActivationConfirmedAt sql.NullTime `db:"activation_confirmed_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Active,
		arg.ActivationConfirmedAt,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findActivationCode = `-- name: FindActivationCode :one
SELECT user_id, token_hash, expires_at, created_at
FROM activation_tokens
WHERE token_hash = ?
LIMIT 1
`

func (q *Queries) FindActivationCode(ctx context.Context, tokenHash string) (ActivationToken, error) {
	row := q.db.QueryRowContext(ctx, findActivationCode, tokenHash)
	var i ActivationToken
	err := row.Scan(
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const findByEmail = `-- name: FindByEmail :one
SELECT id, created_at, updated_at, deleted_at, first_name, last_name, username, password, email, active, activation_confirmed_at
FROM users
WHERE lower(email) = lower(?)
LIMIT 1
`

func (q *Queries) FindByEmail(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, findByEmail, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Active,
		&i.ActivationConfirmedAt,
	)
	return i, err
}

const findPasswordResetCodeByEmailAndToken = `-- name: FindPasswordResetCodeByEmailAndToken :one
SELECT prt.user_id, prt.token_hash, prt.expires_at, prt.created_at,
    u.active as UserActive
FROM password_reset_tokens prt
    INNER JOIN users u on u.id = prt.user_id
WHERE u.email = ?
    and token_hash = ?
LIMIT 1
`

type FindPasswordResetCodeByEmailAndTokenParams struct {
	Email     string `db:"email"`
	TokenHash string `db:"token_hash"`
}

type FindPasswordResetCodeByEmailAndTokenRow struct {
	UserID     int64        `db:"user_id"`
	TokenHash  string       `db:"token_hash"`
	ExpiresAt  time.Time    `db:"expires_at"`
	CreatedAt  sql.NullTime `db:"created_at"`
	UserActive bool         `db:"UserActive"`
}

func (q *Queries) FindPasswordResetCodeByEmailAndToken(ctx context.Context, arg FindPasswordResetCodeByEmailAndTokenParams) (FindPasswordResetCodeByEmailAndTokenRow, error) {
	row := q.db.QueryRowContext(ctx, findPasswordResetCodeByEmailAndToken, arg.Email, arg.TokenHash)
	var i FindPasswordResetCodeByEmailAndTokenRow
	err := row.Scan(
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UserActive,
	)
	return i, err
}

const findPasswordResetCodeByUserIdAndToken = `-- name: FindPasswordResetCodeByUserIdAndToken :one
SELECT user_id, token_hash, expires_at, created_at
FROM password_reset_tokens
WHERE user_id = ?
    and token_hash = ?
LIMIT 1
`

type FindPasswordResetCodeByUserIdAndTokenParams struct {
	UserID    int64  `db:"user_id"`
	TokenHash string `db:"token_hash"`
}

func (q *Queries) FindPasswordResetCodeByUserIdAndToken(ctx context.Context, arg FindPasswordResetCodeByUserIdAndTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, findPasswordResetCodeByUserIdAndToken, arg.UserID, arg.TokenHash)
	var i PasswordResetToken
	err := row.Scan(
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const findUser = `-- name: FindUser :one
SELECT id, created_at, updated_at, deleted_at, first_name, last_name, username, password, email, active, activation_confirmed_at
FROM users
WHERE id = ?
LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Active,
		&i.ActivationConfirmedAt,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, created_at, updated_at, deleted_at, first_name, last_name, username, password, email, active, activation_confirmed_at
FROM users
WHERE lower(username) = lower(?)
LIMIT 1
`

func (q *Queries) FindUserByUsername(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Active,
		&i.ActivationConfirmedAt,
	)
	return i, err
}

const insertActivationToken = `-- name: InsertActivationToken :exec
INSERT INTO activation_tokens (user_id, token_hash, expires_at, created_at)
VALUES(?, ?, ?, CURRENT_TIMESTAMP)
`

type InsertActivationTokenParams struct {
	UserID    int64        `db:"user_id"`
	TokenHash string       `db:"token_hash"`
	ExpiresAt sql.NullTime `db:"expires_at"`
}

func (q *Queries) InsertActivationToken(ctx context.Context, arg InsertActivationTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertActivationToken, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	return err
}

const insertPasswordResetToken = `-- name: InsertPasswordResetToken :exec
INSERT INTO password_reset_tokens (user_id, token_hash, expires_at, created_at)
VALUES(?, ?, ?, CURRENT_TIMESTAMP)
`

type InsertPasswordResetTokenParams struct {
	UserID    int64     `db:"user_id"`
	TokenHash string    `db:"token_hash"`
	ExpiresAt time.Time `db:"expires_at"`
}

func (q *Queries) InsertPasswordResetToken(ctx context.Context, arg InsertPasswordResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, insertPasswordResetToken, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET updated_at = CURRENT_TIMESTAMP,
    password = COALESCE(?, password),
    email = COALESCE(?, email),
    first_name = COALESCE(?, first_name),
    last_name = COALESCE(?, last_name),
    active = COALESCE(?, active),
    activation_confirmed_at = COALESCE(?, activation_confirmed_at)
WHERE id = ?
`

type UpdateUserParams struct {
	Password              string       `db:"password"`
	Email                 string       `db:"email"`
	FirstName             string       `db:"first_name"`
	LastName              string       `db:"last_name"`
	Active                bool         `db:"active"`
	ActivationConfirmedAt sql.NullTime `db:"activation_confirmed_at"`
	ID                    int64        `db:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Password,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Active,
		arg.ActivationConfirmedAt,
		arg.ID,
	)
	return err
}
