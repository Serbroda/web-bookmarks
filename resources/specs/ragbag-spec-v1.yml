openapi: "3.0.0"
info:
  version: 1.0.0
  title: Ragbag REST API

servers:
  - url: http://app.ragbag.dev/api/v1

tags:
  - name: auth
    description: Authentication
  - name: spaces
    description: Spaces
  - name: pages
    description: Pages
  - name: links
    description: Links
  
paths:
  /login:
    post:
      summary: Log in
      description: Log in
      operationId: login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/TokenPairDto'

  /register:
    post:
      summary: Register
      description: Register
      operationId: register
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDto'
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/UserDto'

  /refresh_token:
    post:
      summary: Refresh token
      description: Refresh token
      operationId: refreshToken
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  $ref: '#/components/schemas/Jwt'
              required:
                - refresh_token
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                $ref: '#/components/schemas/TokenPairDto'

  /activate:
    get:
      summary: Refresh token
      description: Refresh token
      operationId: activate
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
      tags:
        - auth
      responses:
        '204':
          $ref: '#/components/responses/NoContent'

  /password_reset:
    post:
      summary: Request a password reset
      description: Request a password reset
      operationId: requestPasswordReset
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '204':
          $ref: '#/components/responses/NoContent'

    put:
      summary: Reset password
      description: Reset password
      operationId: resetPassword
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - code
                - email
                - password
      responses:
        '204':
          $ref: '#/components/responses/NoContent'

    get:
      summary: Start password reset
      description: Start password reset
      operationId: startPasswordReset
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
      tags:
        - auth
      responses:
        '302':
          $ref: '#/components/responses/Found'

# restricted
  /spaces:
    get:
      summary: List all spaces
      description: List all spaces
      operationId: getSpaces
      tags:
        - spaces
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SpaceDto"
    post:
      summary: Create a space
      description: Create a space
      operationId: createSpace
      tags:
        - spaces
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpaceDto'
      responses:
        '203':
          $ref: '#/components/responses/Created'

  /spaces/{spaceId}:
    get:
      summary: Get a space
      description: Get a space
      operationId: getSpace
      tags:
        - spaces
      security:
        - bearerAuth: []
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SpaceDto"
    patch:
      summary: Update a space
      description: Update a space
      operationId: updateSpace
      tags:
        - spaces
      security:
        - bearerAuth: []
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpaceDto'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
    delete:
      summary: Delete a space
      description: Delete a space
      operationId: deleteSpace
      tags:
        - spaces
      security:
        - bearerAuth: []
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
  
  /spaces/{spaceId}/pages:
    get:
      summary: List pages of a space
      description: List pages of a space
      operationId: getPages
      tags:
        - pages
      security:
        - bearerAuth: []
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PageDto"
    post:
      summary: Create a page
      description: Create a page
      operationId: createPage
      tags:
        - pages
      security:
        - bearerAuth: []
      parameters:
        - name: spaceId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePageDto'
      responses:
        '201':
          description: Created
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/PageDto"
  
  /pages/{pageId}:
    get:
      summary: Get a page
      description: Get a page
      operationId: getPage
      tags:
        - pages
      security:
        - bearerAuth: []
      parameters:
        - name: pageId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PageDto"
    patch:
      summary: Update a page
      description: Update a page
      operationId: updatePage
      tags:
        - pages
      security:
        - bearerAuth: []
      parameters:
        - name: pageId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePageDto'
      responses:
        '200':
          description: Ok
    delete:
      summary: Delete a page
      description: Delete a page
      operationId: deletePage
      tags:
        - pages
      security:
        - bearerAuth: []
      parameters:
        - name: pageId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'

  /pages/{pageId}/links:
    get:
      summary: List links of a page
      description: List links of a page
      operationId: getLinks
      tags:
        - links
      security:
        - bearerAuth: []
      parameters:
        - name: pageId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LinkDto"
    post:
      summary: Create a link
      description: Create a link
      operationId: createLink
      tags:
        - links
      security:
        - bearerAuth: []
      parameters:
        - name: pageId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkDto'
      responses:
        '201':
          description: Created
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LinkDto"

  /links/{linkId}:
    get:
      summary: Get a link
      description: Get a link
      operationId: getLink
      tags:
        - links
      security:
        - bearerAuth: []
      parameters:
        - name: linkId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '200':
          description: Ok
          content:
            application/json:    
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LinkDto"
    patch:
      summary: Update a link
      description: Update a link
      operationId: updateLink
      tags:
        - links
      security:
        - bearerAuth: []
      parameters:
        - name: linkId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLinkDto'
      responses:
        '200':
          description: Ok
    delete:
      summary: Delete a link
      description: Delete a link
      operationId: deleteLink
      tags:
        - links
      security:
        - bearerAuth: []
      parameters:
        - name: linkId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'

components:

  responses:
    Ok: # 200
      description: Ok
    Created: # 203
      description: Created
    NoContent: # 204
      description: No Content
    Found: # 302
      description: Found
    BadRequest: # 400
      description: Bad Request
    Unauthorized: # 401
      description: Unauthorized
    Forbidden: # 403
      description: Forbidden
    NotFound: # 404
      description: Not Found
    MethodNotAllowed: # 405
      description: Method Not Allowed
    Conflict: # 409
      description: Conflict
    InternalServerError: # 500
      description: Internal Server Error

  schemas:

    IdInt64:
      type: integer
      format: int64
      example: 123

    IdString:
      type: string
      example: ZHbMDG-aM

    Jwt:
      type: string

    LoginDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    RegistrationDto:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      required:
        - username
        - email
        - password
        - firstName
        - lastName

    TokenPairDto:
      type: object
      properties:
        access_token:
          $ref: "#/components/schemas/Jwt"
        refresh_token:
          $ref: "#/components/schemas/Jwt"

    UserDto:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/IdInt64"
        username:
          type: string

    SpaceVisibility:
      type: string
      enum: 
        - PRIVATE
        - PUBLIC

    SpaceDto:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/IdString"
        ownerId:
          $ref: "#/components/schemas/IdInt64"
        name:
          type: string
        description:
          type: string
        visibility:
          $ref: "#/components/schemas/SpaceVisibility"

    CreateSpaceDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        visibility:
          $ref: "#/components/schemas/SpaceVisibility"
      required:
        - name

    PageVisibility:
      type: string
      enum: 
        - PRIVATE
        - PUBLIC

    PageDto:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/IdString"
        spaceId:
          $ref: "#/components/schemas/IdString"
        ownerId:
          $ref: "#/components/schemas/IdInt64"
        icon:
          type: string
        name:
          type: string
        description:
          type: string
        visibility:
          $ref: "#/components/schemas/PageVisibility"

    CreatePageDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        visibility:
          $ref: "#/components/schemas/PageVisibility"
      required:
        - name

    LinkDto:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/IdString"
        pageId:
          $ref: "#/components/schemas/IdString"
        name:
          type: string
        url:
          type: string
        description:
          type: string

    CreateLinkDto:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        description:
          type: string

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT 
