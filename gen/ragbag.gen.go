// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package gen

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for GroupVisibility.
const (
	GroupVisibilityPRIVATE GroupVisibility = "PRIVATE"
	GroupVisibilityPUBLIC  GroupVisibility = "PUBLIC"
)

// Defines values for SpaceVisibility.
const (
	SpaceVisibilityPRIVATE SpaceVisibility = "PRIVATE"
	SpaceVisibilityPUBLIC  SpaceVisibility = "PUBLIC"
)

// CreateGroupDto defines model for CreateGroupDto.
type CreateGroupDto struct {
	Description *string          `json:"description,omitempty"`
	Name        string           `json:"name"`
	Visibility  *GroupVisibility `json:"visibility,omitempty"`
}

// CreateLinkDto defines model for CreateLinkDto.
type CreateLinkDto struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// CreateSpaceDto defines model for CreateSpaceDto.
type CreateSpaceDto struct {
	Description *string          `json:"description,omitempty"`
	Name        string           `json:"name"`
	Visibility  *SpaceVisibility `json:"visibility,omitempty"`
}

// GroupDto defines model for GroupDto.
type GroupDto struct {
	Description *string          `json:"description,omitempty"`
	Icon        *string          `json:"icon,omitempty"`
	Id          *IdString        `json:"id,omitempty"`
	Name        *string          `json:"name,omitempty"`
	OwnerId     *IdInt64         `json:"ownerId,omitempty"`
	SpaceId     *IdString        `json:"spaceId,omitempty"`
	Visibility  *GroupVisibility `json:"visibility,omitempty"`
}

// GroupVisibility defines model for GroupVisibility.
type GroupVisibility string

// IdInt64 defines model for IdInt64.
type IdInt64 = int64

// IdString defines model for IdString.
type IdString = string

// LinkDto defines model for LinkDto.
type LinkDto struct {
	Description *string   `json:"description,omitempty"`
	GroupId     *IdString `json:"groupId,omitempty"`
	Id          *IdString `json:"id,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// SpaceDto defines model for SpaceDto.
type SpaceDto struct {
	Description *string          `json:"description,omitempty"`
	Id          *IdString        `json:"id,omitempty"`
	Name        *string          `json:"name,omitempty"`
	OwnerId     *IdInt64         `json:"ownerId,omitempty"`
	Visibility  *SpaceVisibility `json:"visibility,omitempty"`
}

// SpaceVisibility defines model for SpaceVisibility.
type SpaceVisibility string

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = CreateGroupDto

// CreateLinkJSONRequestBody defines body for CreateLink for application/json ContentType.
type CreateLinkJSONRequestBody = CreateLinkDto

// UpdateLinkJSONRequestBody defines body for UpdateLink for application/json ContentType.
type UpdateLinkJSONRequestBody = CreateLinkDto

// CreateSpaceJSONRequestBody defines body for CreateSpace for application/json ContentType.
type CreateSpaceJSONRequestBody = CreateSpaceDto

// UpdateSpaceJSONRequestBody defines body for UpdateSpace for application/json ContentType.
type UpdateSpaceJSONRequestBody = CreateSpaceDto

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = CreateGroupDto

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a space
	// (DELETE /groups/{groupId})
	DeleteGroup(ctx echo.Context, groupId IdString) error
	// Get a group
	// (GET /groups/{groupId})
	GetGroup(ctx echo.Context, groupId IdString) error
	// Update a group
	// (PATCH /groups/{groupId})
	UpdateGroup(ctx echo.Context, groupId IdString) error
	// List links of a group
	// (GET /groups/{groupId}/links)
	GetLinks(ctx echo.Context, groupId IdString) error
	// Create a link
	// (POST /groups/{groupId}/links)
	CreateLink(ctx echo.Context, groupId IdString) error
	// Delete a link
	// (DELETE /links/{linkId})
	DeleteLink(ctx echo.Context, linkId IdString) error
	// Get a link
	// (GET /links/{linkId})
	GetLink(ctx echo.Context, linkId IdString) error
	// Update a link
	// (PATCH /links/{linkId})
	UpdateLink(ctx echo.Context, linkId IdString) error
	// List all spaces
	// (GET /spaces)
	GetSpaces(ctx echo.Context) error
	// Create a space
	// (POST /spaces)
	CreateSpace(ctx echo.Context) error
	// Delete a space
	// (DELETE /spaces/{spaceId})
	DeleteSpace(ctx echo.Context, spaceId IdString) error
	// Get a space
	// (GET /spaces/{spaceId})
	GetSpace(ctx echo.Context, spaceId IdString) error
	// Update a space
	// (PATCH /spaces/{spaceId})
	UpdateSpace(ctx echo.Context, spaceId IdString) error
	// List groups of a space
	// (GET /spaces/{spaceId}/groups)
	GetGroups(ctx echo.Context, spaceId IdString) error
	// Create a group
	// (POST /spaces/{spaceId}/groups)
	CreateGroup(ctx echo.Context, spaceId IdString) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroup(ctx, groupId)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroup(ctx, groupId)
	return err
}

// UpdateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateGroup(ctx, groupId)
	return err
}

// GetLinks converts echo context to params.
func (w *ServerInterfaceWrapper) GetLinks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLinks(ctx, groupId)
	return err
}

// CreateLink converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateLink(ctx, groupId)
	return err
}

// DeleteLink converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "linkId" -------------
	var linkId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "linkId", runtime.ParamLocationPath, ctx.Param("linkId"), &linkId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter linkId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLink(ctx, linkId)
	return err
}

// GetLink converts echo context to params.
func (w *ServerInterfaceWrapper) GetLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "linkId" -------------
	var linkId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "linkId", runtime.ParamLocationPath, ctx.Param("linkId"), &linkId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter linkId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLink(ctx, linkId)
	return err
}

// UpdateLink converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "linkId" -------------
	var linkId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "linkId", runtime.ParamLocationPath, ctx.Param("linkId"), &linkId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter linkId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateLink(ctx, linkId)
	return err
}

// GetSpaces converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpaces(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpaces(ctx)
	return err
}

// CreateSpace converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSpace(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSpace(ctx)
	return err
}

// DeleteSpace converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSpace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, ctx.Param("spaceId"), &spaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSpace(ctx, spaceId)
	return err
}

// GetSpace converts echo context to params.
func (w *ServerInterfaceWrapper) GetSpace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, ctx.Param("spaceId"), &spaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSpace(ctx, spaceId)
	return err
}

// UpdateSpace converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSpace(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, ctx.Param("spaceId"), &spaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSpace(ctx, spaceId)
	return err
}

// GetGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, ctx.Param("spaceId"), &spaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroups(ctx, spaceId)
	return err
}

// CreateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "spaceId" -------------
	var spaceId IdString

	err = runtime.BindStyledParameterWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, ctx.Param("spaceId"), &spaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter spaceId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGroup(ctx, spaceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/groups/:groupId", wrapper.DeleteGroup)
	router.GET(baseURL+"/groups/:groupId", wrapper.GetGroup)
	router.PATCH(baseURL+"/groups/:groupId", wrapper.UpdateGroup)
	router.GET(baseURL+"/groups/:groupId/links", wrapper.GetLinks)
	router.POST(baseURL+"/groups/:groupId/links", wrapper.CreateLink)
	router.DELETE(baseURL+"/links/:linkId", wrapper.DeleteLink)
	router.GET(baseURL+"/links/:linkId", wrapper.GetLink)
	router.PATCH(baseURL+"/links/:linkId", wrapper.UpdateLink)
	router.GET(baseURL+"/spaces", wrapper.GetSpaces)
	router.POST(baseURL+"/spaces", wrapper.CreateSpace)
	router.DELETE(baseURL+"/spaces/:spaceId", wrapper.DeleteSpace)
	router.GET(baseURL+"/spaces/:spaceId", wrapper.GetSpace)
	router.PATCH(baseURL+"/spaces/:spaceId", wrapper.UpdateSpace)
	router.GET(baseURL+"/spaces/:spaceId/groups", wrapper.GetGroups)
	router.POST(baseURL+"/spaces/:spaceId/groups", wrapper.CreateGroup)

}
